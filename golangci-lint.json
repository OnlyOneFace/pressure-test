level=warning msg="[runner] Can't process result by diff processor: can't read from patch file ./: read ./: The handle is invalid."
{"Issues":[{"FromLinter":"funlen","Text":"Function 'Start' is too long (77 \u003e 60)","Severity":"","SourceLines":["func (s *StdoutResponse) Start() {"],"Replacement":null,"Pos":{"Filename":"statistics\\statistics.go","Offset":0,"Line":26,"Column":0},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"lll","Text":"line is 146 characters","Severity":"","SourceLines":["func calculateData(concurrent, processingTime, requestTime, maxTime, minTime, successNum, failureNum uint64, chanIdLen int, codeMap map[int]int) {"],"Replacement":null,"Pos":{"Filename":"statistics\\statistics.go","Offset":0,"Line":138,"Column":0},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"lll","Text":"line is 229 characters","Severity":"","SourceLines":["\t// result := fmt.Sprintf(\"请求总数:%8d|successNum:%8d|failureNum:%8d|qps:%9.3f|maxTime:%9.3f|minTime:%9.3f|平均时长:%9.3f|errCode:%v\", successNum+failureNum, successNum, failureNum, qps, maxTimeFloat, minTimeFloat, averageTime, errCode)"],"Replacement":null,"Pos":{"Filename":"statistics\\statistics.go","Offset":0,"Line":163,"Column":0},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"scopelint","Text":"Using the variable on range scope `doTransaction` in function literal","Severity":"","SourceLines":["\t\t\tfor _, client := range doTransaction.Clients {"],"Replacement":null,"Pos":{"Filename":"base\\request.go","Offset":1158,"Line":55,"Column":27},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"gosimple","Text":"S1039: unnecessary use of fmt.Sprintf","Severity":"","SourceLines":["\tresult := fmt.Sprintf(\" 耗时│ 并发数│ 成功数│ 失败数│   QPS  │最长耗时│最短耗时│平均耗时│ 错误码  │ RPS\")"],"Replacement":null,"Pos":{"Filename":"statistics\\statistics.go","Offset":5534,"Line":173,"Column":12},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"govet","Text":"printf: `Println` arg list ends with redundant newline","Severity":"","SourceLines":["\t\tfmt.Println(\"\\n\")"],"Replacement":null,"Pos":{"Filename":"statistics\\statistics.go","Offset":2289,"Line":92,"Column":3},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"govet","Text":"printf: `Println` arg list ends with redundant newline","Severity":"","SourceLines":["\t\tfmt.Println(\"\\n\")"],"Replacement":null,"Pos":{"Filename":"statistics\\statistics.go","Offset":2820,"Line":101,"Column":3},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"noctx","Text":"should rewrite http.NewRequestWithContext or add (*Request).WithContext","Severity":"","SourceLines":["\treq, err := http.NewRequest(strings.ToUpper(s.Method), s.Url, s.Body)"],"Replacement":null,"Pos":{"Filename":"base\\http.go","Offset":837,"Line":40,"Column":29},"ExpectNoLint":false,"ExpectedNoLintLinter":""},{"FromLinter":"staticcheck","Text":"SA6002: argument should be pointer-like to avoid allocations","Severity":"","SourceLines":["\tframePool.Put(buf)"],"Replacement":null,"Pos":{"Filename":"base\\tcp.go","Offset":1953,"Line":93,"Column":16},"ExpectNoLint":false,"ExpectedNoLintLinter":""}],"Report":{"Warnings":[{"Tag":"runner","Text":"Can't process result by diff processor: can't read from patch file ./: read ./: The handle is invalid."}],"Linters":[{"Name":"govet","Enabled":true,"EnabledByDefault":true},{"Name":"bodyclose","Enabled":true},{"Name":"noctx","Enabled":true},{"Name":"errcheck","EnabledByDefault":true},{"Name":"golint"},{"Name":"rowserrcheck","Enabled":true},{"Name":"staticcheck","Enabled":true,"EnabledByDefault":true},{"Name":"unused","Enabled":true,"EnabledByDefault":true},{"Name":"gosimple","Enabled":true,"EnabledByDefault":true},{"Name":"stylecheck"},{"Name":"gosec"},{"Name":"structcheck","Enabled":true,"EnabledByDefault":true},{"Name":"varcheck","Enabled":true,"EnabledByDefault":true},{"Name":"interfacer"},{"Name":"unconvert"},{"Name":"ineffassign","Enabled":true,"EnabledByDefault":true},{"Name":"dupl"},{"Name":"goconst"},{"Name":"deadcode","Enabled":true,"EnabledByDefault":true},{"Name":"gocyclo","Enabled":true},{"Name":"gocognit","Enabled":true},{"Name":"typecheck","EnabledByDefault":true},{"Name":"asciicheck","Enabled":true},{"Name":"gofmt"},{"Name":"gofumpt"},{"Name":"goimports"},{"Name":"goheader"},{"Name":"maligned"},{"Name":"depguard","Enabled":true},{"Name":"misspell"},{"Name":"lll","Enabled":true},{"Name":"unparam"},{"Name":"dogsled"},{"Name":"nakedret"},{"Name":"prealloc"},{"Name":"scopelint","Enabled":true},{"Name":"gocritic"},{"Name":"gochecknoinits"},{"Name":"gochecknoglobals"},{"Name":"godox"},{"Name":"funlen","Enabled":true},{"Name":"whitespace"},{"Name":"wsl"},{"Name":"goprintffuncname"},{"Name":"gomnd"},{"Name":"goerr113"},{"Name":"gomodguard"},{"Name":"godot"},{"Name":"testpackage"},{"Name":"nestif"},{"Name":"exportloopref","Enabled":true},{"Name":"exhaustive","Enabled":true},{"Name":"sqlclosecheck","Enabled":true},{"Name":"nolintlint"}]}}